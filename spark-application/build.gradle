plugins {
    // Apply the scala Plugin to add support for Scala.
    id 'scala'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation 'org.apache.spark:spark-sql_2.12:3.5.0'
    implementation 'org.apache.spark:spark-core_2.12:3.5.0'

    implementation 'org.scala-lang:scala-library:2.12.18'

    // This dependency is used by the application.
    implementation libs.guava

    // Use Scalatest for testing our library
    testImplementation libs.junit
    testImplementation libs.scalatest.v2.v13
    testImplementation libs.junit.v4.v13.v2.v13

    // Need scala-xml at test runtime
    testRuntimeOnly libs.scala.xml.v2.v13
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

jar {
    zip64 true
    archiveBaseName = 'spark-application'
    destinationDirectory = file('build')
    manifest {
        attributes 'Main-Class': 'org.example.App'
    }
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = ["-target:jvm-1.8"]
}